cmake_minimum_required (VERSION 2.8)

# compiler setting
option (USE_LLVM_CLANG "Use llvm clang" OFF)

if (USE_LLVM_CLANG)
	set (CMAKE_C_COMPILER   clang)
	set (CMAKE_CXX_COMPILER clang++)
endif (USE_LLVM_CLANG)

project (DBDemo)

# options
option (USE_SQLITE3 "User sqlite3 DB" ON)
option (USE_MYSQL "Use MySQL DB" ON)
option (USE_REDIS "Use Redis DB" ON)

include (${CMAKE_ROOT}/Modules/CheckIncludeFiles.cmake)
include (${CMAKE_ROOT}/Modules/CheckLibraryExists.cmake)

if (USE_SQLITE3)
	set (SQLITE3_DL_LINK sqlite3)
	if (SQLITE3_INC_DIR)
		find_file (SQLITE3_H sqlite3.h "${SQLITE3_INC_DIR}")
		if (${SQLITE3_H} MATCHES "-NOTFOUND")
			set (HAVE_SQLITE3_H OFF)
		else (${SQLITE3_H} MATCHES "-NOTFOUND")
			set (HAVE_SQLITE3_H ON)
			include_directories (${SQLITE3_INC_DIR})
		endif (${SQLITE3_H} MATCHES "-NOTFOUND")
	endif (SQLITE3_INC_DIR)
	if (NOT HAVE_SQLITE3_H)
		check_include_files ("sqlite3.h" HAVE_SQLITE3_H)
		if (NOT HAVE_SQLITE3_H)
			message (WARNING "NOT found sqlite3.h")
		endif (NOT HAVE_SQLITE3_H)
	endif (NOT HAVE_SQLITE3_H)
	if (SQLITE3_LIB_DIR)
		find_library (SQLITE3_LIB sqlite3 "${SQLITE3_LIB_DIR}")
		if (${SQLITE3_LIB} MATCHES "-NOTFOUND")
			message (WARNING "NOT found library sqlite3")
		else (${SQLITE3_LIB} MATCHES "-NOTFOUND")
			link_directories (${SQLITE3_LIB_DIR})
		endif (${SQLITE3_LIB} MATCHES "-NOTFOUND")
	endif (SQLITE3_LIB_DIR)
endif (USE_SQLITE3)

if (USE_MYSQL)
	set (MYSQL_DL_LINK  mysqlclient pthread m)
	if (MYSQL_INC_DIR)
		find_file (MYSQL_H mysql.h "${MYSQL_INC_DIR}")
		if (${MYSQL_H} MATCHES "-NOTFOUND")
			set (HAVE_MYSQL_H OFF)
		else (${MYSQL_H} MATCHES "-NOTFOUND")
			set (HAVE_MYSQL_H ON)
			include_directories (${MYSQL_INC_DIR})
		endif (${MYSQL_H} MATCHES "-NOTFOUND")
	endif (MYSQL_INC_DIR)
	if (NOT HAVE_MYSQL_H)
		check_include_files ("mysql.h" HAVE_MYSQL_H)
		if (NOT HAVE_MYSQL_H)
			message (WARNING "NOT found mysql.h")
		endif (NOT HAVE_MYSQL_H)
	endif (NOT HAVE_MYSQL_H)
	if (MYSQL_LIB_DIR)
		find_library (MYSQL_LIB mysqlclient "${MYSQL_LIB_DIR}")
		if (${MYSQL_LIB} MATCHES "-NOTFOUND")
			message (WARNING "NOT found library mysqlclient")
		else (${MYSQL_LIB} MATCHES "-NOTFOUND")
			link_directories (${MYSQL_LIB_DIR})
		endif (${MYSQL_LIB} MATCHES "-NOTFOUND")
	endif (MYSQL_LIB_DIR)
endif (USE_MYSQL)

if (USE_REDIS)
	set (REDIS_DL_LINK  hiredis)
	if (REDIS_INC_DIR)
		find_file (REDIS_H hiredis.h "${REDIS_INC_DIR}")
		if (${REDIS_H} MATCHES "-NOTFOUND")
			set (HAVE_REDIS_H OFF)
		else (${REDIS_H} MATCHES "-NOTFOUND")
			set (HAVE_REDIS_H ON)
			include_directories (${REDIS_INC_DIR})
		endif (${REDIS_H} MATCHES "-NOTFOUND")
	endif (REDIS_INC_DIR)
	if (NOT HAVE_REDIS_H)
		check_include_files ("hiredis.h" HAVE_REDIS_H)
		if (NOT HAVE_REDIS_H)
			message (WARNING "NOT found hiredis.h")
		endif (NOT HAVE_REDIS_H)
	endif (NOT HAVE_REDIS_H)
	if (REDIS_LIB_DIR)
		find_library (REDIS_LIB hiredis "${REDIS_LIB_DIR}")
		if (${REDIS_LIB} MATCHES "-NOTFOUND")
			message (WARNING "NOT found library hiredis")
		else (${REDIS_LIB} MATCHES "-NOTFOUND")
			link_directories (${REDIS_LIB_DIR})
		endif (${REDIS_LIB} MATCHES "-NOTFOUND")
	endif (REDIS_LIB_DIR)
endif (USE_REDIS)

configure_file (
	"${PROJECT_SOURCE_DIR}/config.h.in"
	"${PROJECT_BINARY_DIR}/config.h"
)
if (NOT WIN32)
	set (LIBDL dl)
endif (NOT WIN32)
include_directories (${PROJECT_BINARY_DIR})

add_subdirectory (classes lib)
add_subdirectory (example bin)

add_dependencies(demo dbutil)
